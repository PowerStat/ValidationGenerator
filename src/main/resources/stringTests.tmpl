/*
 * Copyright (C) 2020-2023 Dipl.-Inform. Kai Hofmann. All rights reserved!
 */
package de.powerstat.validation.values.test;


import static org.junit.jupiter.api.Assertions.assertAll;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertFalse;
import static org.junit.jupiter.api.Assertions.assertNotEquals;
import static org.junit.jupiter.api.Assertions.assertThrows;
import static org.junit.jupiter.api.Assertions.assertTrue;

import org.junit.jupiter.api.Test;
import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.ValueSource;

import de.powerstat.validation.values.{CLASSNAME};
import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;


/**
 * {CLASSNAME} tests.
 */
@SuppressFBWarnings({"EC_NULL_ARG", "RV_NEGATING_RESULT_OF_COMPARETO", "RV_RETURN_VALUE_IGNORED_NO_SIDE_EFFECT", "SPP_USE_ZERO_WITH_COMPARATOR", "PRMC_POSSIBLY_REDUNDANT_METHOD_CALLS"})
final class {CLASSNAME}Tests
 {
  /**
   * Default constructor.
   */
  /* default */ {CLASSNAME}Tests()
   {
    super();
   }


  /**
   * Test correct {CLASSNAME}.
   *
   * @param {FIELDNAME} {CLASSNAME}
   */
  @ParameterizedTest
  @ValueSource(strings = {"A", "Abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefg"})
  /* default */ void test{FIELDNAME}Correct(final String {FIELDNAME})
   {
    final {CLASSNAME} clean{CLASSNAME} = {CLASSNAME}.of({FIELDNAME});
    assertEquals({FIELDNAME}, clean{CLASSNAME}.stringValue(), "{CLASSNAME} not as expected"); //$NON-NLS-1$
   }


  /**
   * Test {CLASSNAME} with wrong lengths.
   *
   * @param {FIELDNAME} {CLASSNAME}
   */
  @ParameterizedTest
  @ValueSource(strings = {"", "Abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefgh"})
  /* default */ void test{FIELDNAME}Length(final String {FIELDNAME})
   {
    assertThrows(IllegalArgumentException.class, () ->
     {
      /* final {CLASSNAME} clean{CLASSNAME} = */ {CLASSNAME}.of({FIELDNAME});
     }, "Illegal argument exception expected"
    );
   }


  /**
   * Test wrong {CLASSNAME}.
   *
   * @param {FIELDNAME} {CLASSNAME}
   */
  @ParameterizedTest
  @ValueSource(strings = {"abc_def"})
  /* default */ void test{FIELDNAME}Wrong(final String {FIELDNAME})
   {
    assertThrows(IllegalArgumentException.class, () ->
     {
      /* final {CLASSNAME} clean{CLASSNAME} = */ {CLASSNAME}.of({FIELDNAME});
     }, "Illegal argument exception"
    );
   }


  /**
   * Test stringValue.
   */
  @Test
  /* default */ void testSringValue()
   {
    final {CLASSNAME} {FIELDNAME} = {CLASSNAME}.of("Example1"); //$NON-NLS-1$
    assertEquals("Example1", {FIELDNAME}.stringValue(), "{CLASSNAME} not as expected"); //$NON-NLS-1$ //$NON-NLS-2$
   }


  /**
   * Test hash code.
   */
  @Test
  /* default */ void testHashCode()
   {
    final {CLASSNAME} {FIELDNAME}1 = {CLASSNAME}.of("Example1"); //$NON-NLS-1$
    final {CLASSNAME} {FIELDNAME}2 = {CLASSNAME}.of("Example1"); //$NON-NLS-1$
    final {CLASSNAME} {FIELDNAME}3 = {CLASSNAME}.of("Example2"); //$NON-NLS-1$
    assertAll("testHashCode", //$NON-NLS-1$
      () -> assertEquals({FIELDNAME}1.hashCode(), {FIELDNAME}2.hashCode(), "hashCodes are not equal"), //$NON-NLS-1$
      () -> assertNotEquals({FIELDNAME}1.hashCode(), {FIELDNAME}3.hashCode(), "hashCodes are equal") //$NON-NLS-1$
    );
   }


  /**
   * Test equals.
   */
  @Test
  @SuppressWarnings("java:S5785")
  /* default */ void testEquals()
   {
    final {CLASSNAME} {FIELDNAME}1 = {CLASSNAME}.of("Example1"); //$NON-NLS-1$
    final {CLASSNAME} {FIELDNAME}2 = {CLASSNAME}.of("Example1"); //$NON-NLS-1$
    final {CLASSNAME} {FIELDNAME}3 = {CLASSNAME}.of("Example2"); //$NON-NLS-1$
    final {CLASSNAME} {FIELDNAME}4 = {CLASSNAME}.of("Example1"); //$NON-NLS-1$
    assertAll("testEquals", //$NON-NLS-1$
      () -> assertTrue({FIELDNAME}1.equals({FIELDNAME}1), "{FIELDNAME}11 is not equal"), //$NON-NLS-1$
      () -> assertTrue({FIELDNAME}1.equals({FIELDNAME}2), "{FIELDNAME}12 are not equal"), //$NON-NLS-1$
      () -> assertTrue({FIELDNAME}2.equals({FIELDNAME}1), "{FIELDNAME}21 are not equal"), //$NON-NLS-1$
      () -> assertTrue({FIELDNAME}2.equals({FIELDNAME}4), "{FIELDNAME}24 are not equal"), //$NON-NLS-1$
      () -> assertTrue({FIELDNAME}1.equals({FIELDNAME}4), "{FIELDNAME}14 are not equal"), //$NON-NLS-1$
      () -> assertFalse({FIELDNAME}1.equals({FIELDNAME}3), "{FIELDNAME}13 are equal"), //$NON-NLS-1$
      () -> assertFalse({FIELDNAME}3.equals({FIELDNAME}1), "{FIELDNAME}31 are equal"), //$NON-NLS-1$
      () -> assertFalse({FIELDNAME}1.equals(null), "{FIELDNAME}10 is equal") //$NON-NLS-1$
    );
   }


  /**
   * Test toString.
   */
  @Test
  /* default */ void testToString()
   {
    final {CLASSNAME} {FIELDNAME} = {CLASSNAME}.of("Example1");
    assertEquals("{CLASSNAME}[{FIELDNAME}=Example1]", {FIELDNAME}.toString(), "toString not equal"); //$NON-NLS-1$ //$NON-NLS-2$
   }


  /**
   * Test compareTo.
   */
  @Test
  @SuppressWarnings("java:S5785")
  /* default */ void testCompareTo()
   {
    final {CLASSNAME} {FIELDNAME}1 = {CLASSNAME}.of("Example1"); //$NON-NLS-1$
    final {CLASSNAME} {FIELDNAME}2 = {CLASSNAME}.of("Example1"); //$NON-NLS-1$
    final {CLASSNAME} {FIELDNAME}3 = {CLASSNAME}.of("Example2"); //$NON-NLS-1$
    final {CLASSNAME} {FIELDNAME}4 = {CLASSNAME}.of("Example3"); //$NON-NLS-1$
    final {CLASSNAME} {FIELDNAME}5 = {CLASSNAME}.of("Example1"); //$NON-NLS-1$
    assertAll("testCompareTo", //$NON-NLS-1$
      () -> assertTrue({FIELDNAME}1.compareTo({FIELDNAME}2) == -{FIELDNAME}2.compareTo({FIELDNAME}1), "reflexive1"), //$NON-NLS-1$
      () -> assertTrue({FIELDNAME}1.compareTo({FIELDNAME}3) == -{FIELDNAME}3.compareTo({FIELDNAME}1), "reflexive2"), //$NON-NLS-1$
      () -> assertTrue(({FIELDNAME}4.compareTo({FIELDNAME}3) > 0) && ({FIELDNAME}3.compareTo({FIELDNAME}1) > 0) && ({FIELDNAME}4.compareTo({FIELDNAME}1) > 0), "transitive1"), //$NON-NLS-1$
      () -> assertTrue(({FIELDNAME}1.compareTo({FIELDNAME}2) == 0) && (Math.abs({FIELDNAME}1.compareTo({FIELDNAME}5)) == Math.abs({FIELDNAME}2.compareTo({FIELDNAME}5))), "sgn1"), //$NON-NLS-1$
      () -> assertTrue(({FIELDNAME}1.compareTo({FIELDNAME}2) == 0) && {FIELDNAME}1.equals({FIELDNAME}2), "equals") //$NON-NLS-1$
    );
   }

 }
